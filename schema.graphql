### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""Returned when a user logs in our logs out."""
type AuthPayload {
  """Optional error message if success is false"""
  message: String

  """Whether auth operation was successful or not"""
  success: Boolean!

  """Auth token used for future requests"""
  token: String!
}

input ChangeUserPasswordInput {
  currentPassword: String!

  """ID of user to change password for"""
  id: Int!
  newPassword: String!
}

"""Company 3 and 4"""
enum Company {
  COMPANY3
  COMPANY4
}

type CourseID {
  """Course code, e.g. 499, 310"""
  code: String!

  """Course subject, e.g. SENG, CSC"""
  subject: String!

  """Term course is offered in"""
  term: Term!

  """Course Title e.g. Introduction to Artificial Intelligence"""
  title: String

  """Year course is offered in"""
  year: Int!
}

input CourseInput {
  """Course code, e.g. 499, 310"""
  code: String!

  """Number of sections in the course"""
  section: Int!

  """Course subject, e.g. SENG, CSC"""
  subject: String!
}

type CoursePreference {
  id: CourseID!
  preference: Int!
}

input CoursePreferenceInput {
  """Course code, e.g. 499, 310"""
  code: String!
  preference: Int!

  """Course subject, e.g. SENG, CSC"""
  subject: String!

  """Term course is offered in"""
  term: Term!
}

"""
A set of CourseSections with matching CourseID represent a course offering
"""
type CourseSection {
  """The course identifier"""
  CourseID: CourseID!

  """Maximum capacity of the section"""
  capacity: Int!

  """The end date of the course"""
  endDate: Date!

  """How many hours per week a course takes"""
  hoursPerWeek: Float!

  """Days of the week the class is offered in - see Day"""
  meetingTimes: [MeetingTime!]!

  """Professor's info, if any professors are assigned"""
  professors: [User!]

  """Section number for courses, eg: A01, A02"""
  sectionNumber: String

  """The start date of the course"""
  startDate: Date!
}

input CreateTeachingPreferenceInput {
  courses: [CoursePreferenceInput!]!
  hasRelief: Boolean!
  hasTopic: Boolean!
  maxFallCapacity: Int!
  maxSpringCapacity: Int!
  maxSummerCapacity: Int!
  nonTeachingTerm: Term!
  peng: Boolean!
  reliefReason: String
  topicDescription: String
  userId: ID!
  year: Int!
}

input CreateUserInput {
  name: String
  password: String!
  role: Role!
  username: String!
}

type CreateUserMutationResult {
  message: String
  password: String
  success: Boolean!
  username: String
}

scalar Date

"""Days of the Week"""
enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

type Error {
  errors: [Error!]
  message: String!
}

input GenerateScheduleInput {
  algorithm1: Company!
  algorithm2: Company!
  courses: [CourseInput!]
  term: Term!
  year: Int!
}

"""Weekday and time of a course section offering"""
type MeetingTime {
  """Weekday - see DayEnum"""
  day: Day!

  """End time"""
  endTime: Date!

  """Start time"""
  startTime: Date!
}

type Mutation {
  """Change the password of the currently logged in user"""
  changeUserPassword(input: ChangeUserPasswordInput!): Response!

  """Teaching preferences"""
  createTeachingPreference(input: CreateTeachingPreferenceInput!): Response!

  """Register a new user account"""
  createUser(input: CreateUserInput!): CreateUserMutationResult!

  """Generate schedule"""
  generateSchedule(input: GenerateScheduleInput!): Response!

  """Login into a user account using email and password"""
  login(password: String!, username: String!): AuthPayload!

  """Logout the currently logged in user"""
  logout: AuthPayload!

  """Reset a users password."""
  resetPassword(id: ID!): ResetPasswordMutationResult!

  """Updates a user given the user id."""
  updateUser(input: UpdateUserInput!): UpdateUserMutationResult
}

type Query {
  """Get all users"""
  allUsers: [User!]

  """Get all courses preferences"""
  coursePreferences: [CoursePreference!]

  """Get a list of courses for a given term and/or year"""
  courses(term: Term, year: Int): [CourseSection!]

  """Find a user by their id"""
  findUserById(id: Int!): User

  """Get the current user"""
  me: User

  """
  Schedule for a given term. If year is given, returns the most recent schedule generated for that year.
  """
  schedule(year: Int): Schedule

  """Get Teaching Preference Survey for the current user"""
  survey: TeachingPreferenceSurvey!
}

type ResetPasswordMutationResult {
  """Optional error message"""
  message: String

  """New user password"""
  password: String

  """Whether the password was successfully reset"""
  success: Boolean!
}

type Response {
  message: String
  success: Boolean!
}

"""User role"""
enum Role {
  """Administrator role (department staff etc.)"""
  ADMIN

  """User role (professor, student etc.)"""
  USER
}

"""Generated schedule for a year"""
type Schedule {
  """Scheduled courses"""
  courses(term: Term!): [CourseSection!]

  """When the schedule was generated"""
  createdAt: Date!

  """ID of the schedule"""
  id: ID!

  """Year for the schedule"""
  year: Int!
}

type TeachingPreferenceSurvey {
  courses: [CoursePreference!]!
}

"""UVic Terms"""
enum Term {
  FALL
  SPRING
  SUMMER
}

input UpdateUserInput {
  """New active status of user"""
  active: Boolean

  """User id to be changed"""
  id: Int!

  """New name of user"""
  name: String

  """New role of user"""
  role: Role
}

type UpdateUserMutationResult {
  errors: [Error!]
  user: User
}

type User {
  """Determine if the user is marked active"""
  active: Boolean!

  """User id"""
  id: Int!

  """Name of the user"""
  name: String

  """Password"""
  password: String!

  """Teaching preferences"""
  preferences: [CoursePreference!]

  """role - see enum Role"""
  role: Role!

  """Username"""
  username: String!
}