/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  ChangeUserPasswordInput: { // input type
    currentPassword: string; // String!
    id: number; // Int!
    newPassword: string; // String!
  }
  CourseInput: { // input type
    code: string; // String!
    section: number; // Int!
    subject: string; // String!
  }
  CoursePreferenceInput: { // input type
    code: string; // String!
    preference: number; // Int!
    subject: string; // String!
    term: NexusGenEnums['Term']; // Term!
  }
  CreateTeachingPreferenceInput: { // input type
    courses: NexusGenInputs['CoursePreferenceInput'][]; // [CoursePreferenceInput!]!
    fallTermCourses?: number | null; // Int
    hasRelief: boolean; // Boolean!
    hasTopic: boolean; // Boolean!
    nonTeachingTerm?: NexusGenEnums['Term'] | null; // Term
    peng: boolean; // Boolean!
    reliefReason?: string | null; // String
    springTermCourses?: number | null; // Int
    summerTermCourses?: number | null; // Int
    topicDescription?: string | null; // String
    userId: string; // ID!
  }
  CreateUserInput: { // input type
    name?: string | null; // String
    password: string; // String!
    role: NexusGenEnums['Role']; // Role!
    username: string; // String!
  }
  GenerateScheduleInput: { // input type
    algorithm1: NexusGenEnums['Company']; // Company!
    algorithm2: NexusGenEnums['Company']; // Company!
    fallCourses?: NexusGenInputs['CourseInput'][] | null; // [CourseInput!]
    springCourses?: NexusGenInputs['CourseInput'][] | null; // [CourseInput!]
    summerCourses?: NexusGenInputs['CourseInput'][] | null; // [CourseInput!]
    year: number; // Int!
  }
  UpdateUserInput: { // input type
    active?: boolean | null; // Boolean
    id: number; // Int!
    name?: string | null; // String
    role?: NexusGenEnums['Role'] | null; // Role
  }
}

export interface NexusGenEnums {
  Company: "COMPANY3" | "COMPANY4"
  Day: "FRIDAY" | "MONDAY" | "SATURDAY" | "SUNDAY" | "THURSDAY" | "TUESDAY" | "WEDNESDAY"
  Role: "ADMIN" | "USER"
  Term: "FALL" | "SPRING" | "SUMMER"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    message?: string | null; // String
    success: boolean; // Boolean!
    token: string; // String!
  }
  CourseID: { // root type
    code: string; // String!
    subject: string; // String!
    term: NexusGenEnums['Term']; // Term!
    title?: string | null; // String
    year: number; // Int!
  }
  CoursePreference: { // root type
    id: NexusGenRootTypes['CourseID']; // CourseID!
    preference: number; // Int!
  }
  CourseSection: { // root type
    CourseID: NexusGenRootTypes['CourseID']; // CourseID!
    capacity: number; // Int!
    endDate: NexusGenScalars['Date']; // Date!
    hoursPerWeek: number; // Float!
    meetingTimes: NexusGenRootTypes['MeetingTime'][]; // [MeetingTime!]!
    professors?: NexusGenRootTypes['User'][] | null; // [User!]
    sectionNumber?: string | null; // String
    startDate: NexusGenScalars['Date']; // Date!
  }
  CreateUserMutationResult: { // root type
    message?: string | null; // String
    password?: string | null; // String
    success: boolean; // Boolean!
    username?: string | null; // String
  }
  Error: { // root type
    errors?: NexusGenRootTypes['Error'][] | null; // [Error!]
    message: string; // String!
  }
  MeetingTime: { // root type
    day: NexusGenEnums['Day']; // Day!
    endTime: NexusGenScalars['Date']; // Date!
    startTime: NexusGenScalars['Date']; // Date!
  }
  Mutation: {};
  Query: {};
  ResetPasswordMutationResult: { // root type
    message?: string | null; // String
    password?: string | null; // String
    success: boolean; // Boolean!
  }
  Response: { // root type
    message?: string | null; // String
    success: boolean; // Boolean!
  }
  Schedule: { // root type
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    year: number; // Int!
  }
  TeachingPreferenceSurvey: { // root type
    courses: NexusGenRootTypes['CoursePreference'][]; // [CoursePreference!]!
  }
  UpdateUserMutationResult: { // root type
    errors?: NexusGenRootTypes['Error'][] | null; // [Error!]
    user?: NexusGenRootTypes['User'] | null; // User
  }
  User: { // root type
    active: boolean; // Boolean!
    id: number; // Int!
    name?: string | null; // String
    password: string; // String!
    role: NexusGenEnums['Role']; // Role!
    username: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    message: string | null; // String
    success: boolean; // Boolean!
    token: string; // String!
  }
  CourseID: { // field return type
    code: string; // String!
    subject: string; // String!
    term: NexusGenEnums['Term']; // Term!
    title: string | null; // String
    year: number; // Int!
  }
  CoursePreference: { // field return type
    id: NexusGenRootTypes['CourseID']; // CourseID!
    preference: number; // Int!
  }
  CourseSection: { // field return type
    CourseID: NexusGenRootTypes['CourseID']; // CourseID!
    capacity: number; // Int!
    endDate: NexusGenScalars['Date']; // Date!
    hoursPerWeek: number; // Float!
    meetingTimes: NexusGenRootTypes['MeetingTime'][]; // [MeetingTime!]!
    professors: NexusGenRootTypes['User'][] | null; // [User!]
    sectionNumber: string | null; // String
    startDate: NexusGenScalars['Date']; // Date!
  }
  CreateUserMutationResult: { // field return type
    message: string | null; // String
    password: string | null; // String
    success: boolean; // Boolean!
    username: string | null; // String
  }
  Error: { // field return type
    errors: NexusGenRootTypes['Error'][] | null; // [Error!]
    message: string; // String!
  }
  MeetingTime: { // field return type
    day: NexusGenEnums['Day']; // Day!
    endTime: NexusGenScalars['Date']; // Date!
    startTime: NexusGenScalars['Date']; // Date!
  }
  Mutation: { // field return type
    changeUserPassword: NexusGenRootTypes['Response']; // Response!
    createTeachingPreference: NexusGenRootTypes['Response']; // Response!
    createUser: NexusGenRootTypes['CreateUserMutationResult']; // CreateUserMutationResult!
    generateSchedule: NexusGenRootTypes['Response']; // Response!
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    logout: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    resetPassword: NexusGenRootTypes['ResetPasswordMutationResult']; // ResetPasswordMutationResult!
    updateUser: NexusGenRootTypes['UpdateUserMutationResult'] | null; // UpdateUserMutationResult
  }
  Query: { // field return type
    allUsers: NexusGenRootTypes['User'][] | null; // [User!]
    coursePreferences: NexusGenRootTypes['CoursePreference'][] | null; // [CoursePreference!]
    courses: NexusGenRootTypes['CourseSection'][] | null; // [CourseSection!]
    findUserById: NexusGenRootTypes['User'] | null; // User
    me: NexusGenRootTypes['User'] | null; // User
    schedule: NexusGenRootTypes['Schedule'] | null; // Schedule
    survey: NexusGenRootTypes['TeachingPreferenceSurvey']; // TeachingPreferenceSurvey!
  }
  ResetPasswordMutationResult: { // field return type
    message: string | null; // String
    password: string | null; // String
    success: boolean; // Boolean!
  }
  Response: { // field return type
    message: string | null; // String
    success: boolean; // Boolean!
  }
  Schedule: { // field return type
    courses: NexusGenRootTypes['CourseSection'][] | null; // [CourseSection!]
    createdAt: NexusGenScalars['Date']; // Date!
    id: string; // ID!
    year: number; // Int!
  }
  TeachingPreferenceSurvey: { // field return type
    courses: NexusGenRootTypes['CoursePreference'][]; // [CoursePreference!]!
  }
  UpdateUserMutationResult: { // field return type
    errors: NexusGenRootTypes['Error'][] | null; // [Error!]
    user: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    active: boolean; // Boolean!
    id: number; // Int!
    name: string | null; // String
    password: string; // String!
    preferences: NexusGenRootTypes['CoursePreference'][] | null; // [CoursePreference!]
    role: NexusGenEnums['Role']; // Role!
    username: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    message: 'String'
    success: 'Boolean'
    token: 'String'
  }
  CourseID: { // field return type name
    code: 'String'
    subject: 'String'
    term: 'Term'
    title: 'String'
    year: 'Int'
  }
  CoursePreference: { // field return type name
    id: 'CourseID'
    preference: 'Int'
  }
  CourseSection: { // field return type name
    CourseID: 'CourseID'
    capacity: 'Int'
    endDate: 'Date'
    hoursPerWeek: 'Float'
    meetingTimes: 'MeetingTime'
    professors: 'User'
    sectionNumber: 'String'
    startDate: 'Date'
  }
  CreateUserMutationResult: { // field return type name
    message: 'String'
    password: 'String'
    success: 'Boolean'
    username: 'String'
  }
  Error: { // field return type name
    errors: 'Error'
    message: 'String'
  }
  MeetingTime: { // field return type name
    day: 'Day'
    endTime: 'Date'
    startTime: 'Date'
  }
  Mutation: { // field return type name
    changeUserPassword: 'Response'
    createTeachingPreference: 'Response'
    createUser: 'CreateUserMutationResult'
    generateSchedule: 'Response'
    login: 'AuthPayload'
    logout: 'AuthPayload'
    resetPassword: 'ResetPasswordMutationResult'
    updateUser: 'UpdateUserMutationResult'
  }
  Query: { // field return type name
    allUsers: 'User'
    coursePreferences: 'CoursePreference'
    courses: 'CourseSection'
    findUserById: 'User'
    me: 'User'
    schedule: 'Schedule'
    survey: 'TeachingPreferenceSurvey'
  }
  ResetPasswordMutationResult: { // field return type name
    message: 'String'
    password: 'String'
    success: 'Boolean'
  }
  Response: { // field return type name
    message: 'String'
    success: 'Boolean'
  }
  Schedule: { // field return type name
    courses: 'CourseSection'
    createdAt: 'Date'
    id: 'ID'
    year: 'Int'
  }
  TeachingPreferenceSurvey: { // field return type name
    courses: 'CoursePreference'
  }
  UpdateUserMutationResult: { // field return type name
    errors: 'Error'
    user: 'User'
  }
  User: { // field return type name
    active: 'Boolean'
    id: 'Int'
    name: 'String'
    password: 'String'
    preferences: 'CoursePreference'
    role: 'Role'
    username: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    changeUserPassword: { // args
      input: NexusGenInputs['ChangeUserPasswordInput']; // ChangeUserPasswordInput!
    }
    createTeachingPreference: { // args
      input: NexusGenInputs['CreateTeachingPreferenceInput']; // CreateTeachingPreferenceInput!
    }
    createUser: { // args
      input: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
    generateSchedule: { // args
      input: NexusGenInputs['GenerateScheduleInput']; // GenerateScheduleInput!
    }
    login: { // args
      password: string; // String!
      username: string; // String!
    }
    resetPassword: { // args
      id: string; // ID!
    }
    updateUser: { // args
      input: NexusGenInputs['UpdateUserInput']; // UpdateUserInput!
    }
  }
  Query: {
    courses: { // args
      term?: NexusGenEnums['Term'] | null; // Term
      year?: number | null; // Int
    }
    findUserById: { // args
      id: number; // Int!
    }
    schedule: { // args
      year?: number | null; // Int
    }
  }
  Schedule: {
    courses: { // args
      term: NexusGenEnums['Term']; // Term!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}